# coding: utf-8

"""
    Our City App

    Our City App internal apis  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from oca.configuration import Configuration


class HomeScreen(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'int',
        'content': 'HomeScreenContent',
        'bottom_navigation': 'HomeScreenBottomNavigation',
        'bottom_sheet': 'HomeScreenBottomSheet',
        'default_language': 'str',
        'translations': 'dict(str, dict(str, str))'
    }

    attribute_map = {
        'version': 'version',
        'content': 'content',
        'bottom_navigation': 'bottom_navigation',
        'bottom_sheet': 'bottom_sheet',
        'default_language': 'default_language',
        'translations': 'translations'
    }

    def __init__(self, version=None, content=None, bottom_navigation=None, bottom_sheet=None, default_language=None, translations=None, local_vars_configuration=None):  # noqa: E501
        """HomeScreen - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._content = None
        self._bottom_navigation = None
        self._bottom_sheet = None
        self._default_language = None
        self._translations = None
        self.discriminator = None

        self.version = version
        self.content = content
        self.bottom_navigation = bottom_navigation
        self.bottom_sheet = bottom_sheet
        self.default_language = default_language
        self.translations = translations

    @property
    def version(self):
        """Gets the version of this HomeScreen.  # noqa: E501


        :return: The version of this HomeScreen.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HomeScreen.


        :param version: The version of this HomeScreen.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def content(self):
        """Gets the content of this HomeScreen.  # noqa: E501


        :return: The content of this HomeScreen.  # noqa: E501
        :rtype: HomeScreenContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this HomeScreen.


        :param content: The content of this HomeScreen.  # noqa: E501
        :type: HomeScreenContent
        """
        if self.local_vars_configuration.client_side_validation and content is None:  # noqa: E501
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def bottom_navigation(self):
        """Gets the bottom_navigation of this HomeScreen.  # noqa: E501


        :return: The bottom_navigation of this HomeScreen.  # noqa: E501
        :rtype: HomeScreenBottomNavigation
        """
        return self._bottom_navigation

    @bottom_navigation.setter
    def bottom_navigation(self, bottom_navigation):
        """Sets the bottom_navigation of this HomeScreen.


        :param bottom_navigation: The bottom_navigation of this HomeScreen.  # noqa: E501
        :type: HomeScreenBottomNavigation
        """
        if self.local_vars_configuration.client_side_validation and bottom_navigation is None:  # noqa: E501
            raise ValueError("Invalid value for `bottom_navigation`, must not be `None`")  # noqa: E501

        self._bottom_navigation = bottom_navigation

    @property
    def bottom_sheet(self):
        """Gets the bottom_sheet of this HomeScreen.  # noqa: E501


        :return: The bottom_sheet of this HomeScreen.  # noqa: E501
        :rtype: HomeScreenBottomSheet
        """
        return self._bottom_sheet

    @bottom_sheet.setter
    def bottom_sheet(self, bottom_sheet):
        """Sets the bottom_sheet of this HomeScreen.


        :param bottom_sheet: The bottom_sheet of this HomeScreen.  # noqa: E501
        :type: HomeScreenBottomSheet
        """
        if self.local_vars_configuration.client_side_validation and bottom_sheet is None:  # noqa: E501
            raise ValueError("Invalid value for `bottom_sheet`, must not be `None`")  # noqa: E501

        self._bottom_sheet = bottom_sheet

    @property
    def default_language(self):
        """Gets the default_language of this HomeScreen.  # noqa: E501

        Language to use when the user his language is not one of the available ones in the translation mapping  # noqa: E501

        :return: The default_language of this HomeScreen.  # noqa: E501
        :rtype: str
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this HomeScreen.

        Language to use when the user his language is not one of the available ones in the translation mapping  # noqa: E501

        :param default_language: The default_language of this HomeScreen.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and default_language is None:  # noqa: E501
            raise ValueError("Invalid value for `default_language`, must not be `None`")  # noqa: E501

        self._default_language = default_language

    @property
    def translations(self):
        """Gets the translations of this HomeScreen.  # noqa: E501

        Translations for any string which could be translated on the homescreen. Properties that should be translated should contain a $ prefix. For example, label -> $trash_calendar  # noqa: E501

        :return: The translations of this HomeScreen.  # noqa: E501
        :rtype: dict(str, dict(str, str))
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this HomeScreen.

        Translations for any string which could be translated on the homescreen. Properties that should be translated should contain a $ prefix. For example, label -> $trash_calendar  # noqa: E501

        :param translations: The translations of this HomeScreen.  # noqa: E501
        :type: dict(str, dict(str, str))
        """
        if self.local_vars_configuration.client_side_validation and translations is None:  # noqa: E501
            raise ValueError("Invalid value for `translations`, must not be `None`")  # noqa: E501

        self._translations = translations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HomeScreen):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HomeScreen):
            return True

        return self.to_dict() != other.to_dict()
