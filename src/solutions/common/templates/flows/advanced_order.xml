<?xml version="1.0" encoding="utf-8"?>
<messageFlowDefinitionSet xmlns="https://rogerth.at/api/1/MessageFlow.xsd">
    <definition name="{{ flow_name }}"
                language="{{ language }}"
                startReference="flowcode_check_feature_advanced_order">
        <end id="end_advanced_order"
             waitForFollowUpMessage="false"/>
        <end id="end_processing"
             waitForFollowUpMessage="{% if manual_confirmation %}false{% else %}true{% endif %}"/>
        <end id="end_feature_not_supported"
                 waitForFollowUpMessage="false" />

        <flowCode
            id="flowcode_check_feature_advanced_order"
            exceptionReference="message_feature_not_supported">
            <outlet
                reference="message_advanced_order"
                name="message_advanced_order"
                value="message_advanced_order" />
            {% if payment_enabled %}
            <outlet
                reference="message_advanced_order_with_pay"
                name="message_advanced_order_with_pay"
                value="message_advanced_order_with_pay" />
            {% endif %}
            <outlet
                reference="message_feature_not_supported"
                name="not_supported"
                value="not_supported" />
            <javascriptCode>
                var notSupported = function() {
                    return { outlet: &quot;not_supported&quot; };
                };
                function run(rogerthat, mfr){
                    if (!rogerthat.system || !rogerthat.system.appVersion) {
                        return notSupported();
                    }
                    var appVersion = rogerthat.system.appVersion.split(&quot;.&quot;).map(function(x) {
                        return parseInt(x);
                    });

                    if (rogerthat.system.os == &quot;android&quot;) {
                        if (!(appVersion[0] &gt; 1
                                || appVersion[1] &gt; {{ Features.ADVANCED_ORDER.android.major }}
                                || appVersion[2] &gt;= {{ Features.ADVANCED_ORDER.android.minor }})) {
                            return notSupported();
                        }
                    } else if (rogerthat.system.os == &quot;ios&quot;) {
                        if (!(appVersion[0] &gt; 1
                            || appVersion[1] &gt; {{ Features.ADVANCED_ORDER.ios.major }}
                            || appVersion[2] &gt;= {{ Features.ADVANCED_ORDER.ios.minor }})) {
                            return notSupported();
                        }
                    }

                    var outlet = 'message_advanced_order';
                    {% if payment_enabled %}
                    if (rogerthat.service.data.settings.payment.enabled) {
                        outlet = 'message_advanced_order_with_pay';
                        if (rogerthat.system.os == &quot;android&quot;) {
                            if (!(appVersion[0] &gt; 2
                                    || appVersion[1] &gt; {{ Features.PAYMENTS.android.major }}
                                    || appVersion[2] &gt;= {{ Features.PAYMENTS.android.minor }})) {
                                if (rogerthat.service.data.settings.payment.optional) {
                                    outlet = 'message_advanced_order';
                                } else {
                                    return notSupported();
                                }
                            }
                         } else if (rogerthat.system.os == &quot;ios&quot;) {
                            if (!(appVersion[0] &gt; 2
                                    || appVersion[1] &gt; {{ Features.PAYMENTS.ios.major }}
                                    || appVersion[2] &gt;= {{ Features.PAYMENTS.ios.minor }})) {
                                if (rogerthat.service.data.settings.payment.optional) {
                                    outlet = 'message_advanced_order';
                                } else {
                                    return notSupported();
                                }
                            }
                        }
                    }
                    {% endif %}
                    return {outlet: outlet, defaultValue: mfr.flow_params.advancedOrder };
                }
            </javascriptCode>
        </flowCode>

        <message
            brandingKey="{{ branding_key }}"
            id="message_feature_not_supported"
            alertIntervalType="NONE"
            alertType="SILENT"
            allowDismiss="true"
            dismissReference="end_feature_not_supported"
            vibrate="false"
            autoLock="true">
            <content>{% translate language, 'message_feature_not_supported' %}</content>
        </message>

        <formMessage id="message_advanced_order"
                     alertIntervalType="NONE"
                     alertType="SILENT"
                     brandingKey="{{ branding_key }}"
                     positiveReference="message_comment"
                     vibrate="false"
                     autoLock="true"
                     negativeReference="end_advanced_order">
            <content>{% if custom_message %}{{ custom_message }}{% else %}{% translate language, 'enter_your_order' %}{% endif %}

{{ leap_time_message }}</content>
            <form positiveButtonConfirmation=""
                  negativeButtonCaption="{% translate language, 'Cancel' %}"
                  positiveButtonCaption="{% translate language, 'Next' %}"
                  negativeButtonConfirmation="">
                <widget xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:type="AdvancedOrderWidget"
                        currency="{{ settings.currency_symbol }}"
                        leapTime="{{ leap_time }}">
                    {% for category in menu.categories %}
                    {% if category.items and category.has_visible %}
                    <category id="{{ category.id|e }}">
                        <name>{{ category.name|e }}</name>
                        {% for item in category.items %}
                            {% if item.visible %}
                                <item id="{{ item.id|e }}"
                                  value="0"
                                  unitPrice="{% if item.has_price %}{{ item.price }}{% else %}0{% endif %}"
                                  hasPrice="{{ item.has_price|lower }}"
                                  unit="{{ item.price_unit_str }}"
                                  step="{{ item.step }}"
                                  stepUnit="{{ item.step_unit_str }}"
                                  stepUnitConversion="{{ item.step_unit_conversion }}"
                                  {% if item.image_url %}
                                  imageUrl="{{ item.image_url }}"
                                  {% endif %}
                                >
                                    <name>{{ item.name|e }}</name>
                                    {% if item.description %}<description>{{ item.description|e }}</description>{% endif %}
                                </item>
                            {% endif %}
                        {% endfor %}
                    </category>
                    {% endif %}
                    {% endfor %}
                </widget>
            </form>
        </formMessage>

        {% if payment_enabled %}
        <formMessage id="message_advanced_order_with_pay"
                     alertIntervalType="NONE"
                     alertType="SILENT"
                     brandingKey="{{ branding_key }}"
                     positiveReference="message_comment"
                     vibrate="false"
                     autoLock="true"
                     negativeReference="end_advanced_order">
            <content>{% if custom_message %}{{ custom_message }}{% else %}{% translate language, 'enter_your_order' %}{% endif %}

{{ leap_time_message }}{% if min_amount_for_fee_message %}

{{ min_amount_for_fee_message }}
{% endif %}</content>
            <form positiveButtonConfirmation=""
                  negativeButtonCaption="{% translate language, 'Cancel' %}"
                  positiveButtonCaption="{% translate language, 'Next' %}"
                  negativeButtonConfirmation="">
                <widget xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:type="AdvancedOrderWidget"
                        currency="{{ settings.currency_symbol }}"
                        leapTime="{{ leap_time }}">
                    {% for category in menu.categories %}
                    {% if category.items and category.has_visible_with_pay %}
                    <category id="{{ category.id|e }}">
                        <name>{{ category.name|e }}</name>
                        {% for item in category.items %}
                            {% if item.visible_with_pay %}
                                <item id="{{ item.id|e }}"
                                  value="0"
                                  unitPrice="{{ item.price }}"
                                  hasPrice="true"
                                  step="{{ item.step }}"
                                  unit="{{ item.price_unit_str }}"
                                  stepUnit="{{ item.step_unit_str }}"
                                  stepUnitConversion="{{ item.step_unit_conversion }}"
                                  {% if item.image_url %}
                                  imageUrl="{{ item.image_url }}"
                                  {% endif %}
                                >
                                    <name>{{ item.name|e }}</name>
                                    {% if item.description %}
                                    <description>{{ item.description|e }}</description>
                                    {% endif %}
                                </item>
                            {% endif %}
                        {% endfor %}
                    </category>
                    {% endif %}
                    {% endfor %}
                </widget>
            </form>
        </formMessage>
        {% endif %}

        <flowCode
                id="flow_code_phone_default"
                exceptionReference="message_phone">
            <outlet
                    reference="message_phone"
                    name="message_phone"
                    value="message_phone"/>
            <javascriptCode>
                function run(rogerthat, messageFlowRun) {
                    return { outlet: 'message_phone', defaultValue: rogerthat.user.data.phone };
                }
            </javascriptCode>
        </flowCode>

        <formMessage id="message_phone"
                     alertIntervalType="NONE"
                     alertType="SILENT"
                     brandingKey="{{ branding_key }}"
                     positiveReference="flowcode_set_datetime_step"
                     vibrate="false"
                     autoLock="true"
                     negativeReference="end_advanced_order">
            <content>{% translate language, 'order-flow-phone' %}</content>
            <form positiveButtonConfirmation=""
                  negativeButtonCaption="{% translate language, 'Cancel' %}"
                  positiveButtonCaption="{% translate language, 'Next' %}"
                  negativeButtonConfirmation="" >
                <widget xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:type="TextLineWidget"
                        keyboardType="PHONE"
                        maxChars="50"/>

                <javascriptValidation>
                    function run(result){
                        if (!result.value || result.value.length &lt; 8) {
                            return "{% translate language, 'please_enter_a_valid_phone_number' %}";
                        }
                     }
                </javascriptValidation>
            </form>
        </formMessage>
        <formMessage id="message_comment"
                     brandingKey="{{ branding_key }}"
                     alertIntervalType="NONE"
                     alertType="SILENT"
                     positiveReference="flow_code_phone_default"
                     vibrate="false"
                     autoLock="true"
                     negativeReference="flow_code_phone_default">
            <content>{% translate language, 'add_unavailable_items_or_comment' %}</content>
            <form positiveButtonConfirmation=""
                  negativeButtonCaption="{% translate language, 'skip' %}"
                  positiveButtonCaption="{% translate language, 'Next' %}"
                  negativeButtonConfirmation="">
                <widget xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:type="TextBlockWidget"
                        maxChars="1000"
                        placeholder=""
                        value=""/>
            </form>
        </formMessage>
        <formMessage brandingKey="{{ branding_key }}"
                     id="message_takeaway_time"
                     alertIntervalType="NONE" alertType="SILENT"
                     positiveReference="flow_code_check_internet_before_flush"
                     vibrate="false" autoLock="true"
                     negativeReference="end_advanced_order">
            <content>{% translate language, 'select_date_and_time_for_pickup' %}</content>
            <form positiveButtonCaption="{% translate language, 'Send' %}"
                  negativeButtonCaption="{% translate language, 'Cancel' %}" >
                <widget xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:type="SelectDateWidget"
                        minuteInterval="15"
                        mode="date_time"
                        unit="&lt;value/&gt;"
                        />

                <javascriptValidation>
                    function run(result, rogerthat){
                        {% if multiple_locations %}
                        if (rogerthat === undefined) {
                            return '{% translate language, 'message_feature_not_supported', '_duplicate_backslashes=True' %}';
                        }
                        {% endif %}
                        function isInWorkingHours(){
                            var selectedDate = new Date(selectedDateTime * 1000);
                            var dayToday = selectedDate.getUTCDay();
                            var sAfterMidnight = selectedDateTime % 86400;
                            var canOrder = orderableTimes.filter(function(t) {
                                return dayToday === t.day &amp;&amp; (t.time_until &gt;= sAfterMidnight &amp;&amp; sAfterMidnight &gt;= t.time_from);
                            });
                            return !!canOrder.length;
                        }
                        var orderableTimes = {{ orderable_times }};
                        var leapTime = {{ leap_time }};

                        var timezoneOffsets = {{ timezone_offsets }};
                        var currentDateTimeSeconds = new Date().getTime() / 1000;
                        var timezoneOffset = 0;
                        for (var i=0; i &lt; timezoneOffsets.length; i ++) {
                            var zone = timezoneOffsets[i];
                            if (zone[0] &lt; currentDateTimeSeconds &amp;&amp; currentDateTimeSeconds &lt;= zone[1]) {
                                timezoneOffset = zone[2];
                                break;
                            }
                        }
                        var selectedDateTime = result.value;
                        if (selectedDateTime &lt; (currentDateTimeSeconds + leapTime + timezoneOffset)){ /* no idea why timezone has to be added here but it works */
                            return '{% translate language, 'please_order_after', 'leap_time=' + leap_time_str, '_duplicate_backslashes=True' %}';
                        }else if(isInWorkingHours()){
                            return;
                        }
                        else{
                            return '{% translate language, 'can_not_order_at_that_time', '_duplicate_backslashes=True' %} {{orderable_times_str}}';
                        }
                    }
                </javascriptValidation>
            </form>
        </formMessage>
        <flowCode
                id="flowcode_set_datetime_step"
                exceptionReference="message_takeaway_time">
            <outlet
                    reference="message_takeaway_time"
                    name="message_takeaway_time"
                    value="message_takeaway_time" />
            <javascriptCode>
                function run(rogerthat, messageFlowRun){
                    var phoneNumber = messageFlowRun.steps[messageFlowRun.steps.length -1].form_result.result.value;
                    if (phoneNumber !== rogerthat.user.data.phone) {
                        rogerthat.user.data.phone = phoneNumber;
                        rogerthat.user.put();
                    }
                    var orderableTimes = {{ orderable_times }};
                    var leapTime = {{ leap_time }};

                    var timezoneOffsets = {{ timezone_offsets }};
                    var currentDateTimeSeconds = new Date().getTime() / 1000;
                    var timezoneOffset = 0;
                    for (var i=0; i &lt; timezoneOffsets.length; i ++) {
                        var zone = timezoneOffsets[i];
                        if (zone[0] &lt; currentDateTimeSeconds &amp;&amp; currentDateTimeSeconds &lt;= zone[1]) {
                            timezoneOffset = zone[2];
                            break;
                        }
                    }

                    var getOrderableTimes = function (startDay, startTime) {
                        var a = [];
                        for (var i=0; i&lt;orderableTimes.length; i++) {
                            var ot = orderableTimes[i];
                            ot = {day:ot.day, time_from:ot.time_from, time_until:ot.time_until};
                            if ((ot.day == startDay &amp;&amp; ot.time_until &lt;= startTime) || ot.day &lt; startDay)
                                ot.day += 7;
                            ot.offsetDays = ot.day - startDay;
                            a.push(ot);
                        }
                        a.sort(function (left, right) {
                            return (left.day * 86400 + left.time_from) - (right.day * 86400 + right.time_from);
                        });
                        return a;
                    };

                    var nextPossitiveButton = '{% translate language, 'Send' %}';
                    if (messageFlowRun.steps[0]['step_id'] === 'message_advanced_order_with_pay') {
                        nextPossitiveButton = '{% translate language, 'Next' %}';
                    }

                    var applyLeapTime = true;
                    var d = new Date();
                    var dt = d.getTime() / 1000 + (applyLeapTime ? leapTime : 0);
                    applyLeapTime = false;
                    var rest = dt % (60 * 15);
                    dt -= rest;
                    if (rest !== 0) {
                        dt += 60 * 15;
                    }
                    /* Apply timezoneOffset on dt */
                    dt = dt + timezoneOffset + 60 * d.getTimezoneOffset();
                    var ept = new Date(dt*1000);
                    var eptDayOfWeek = ept.getDay();
                    var eptHour = ept.getHours();
                    var eptMinute = ept.getMinutes();
                    var eptSecondsAfterMidnight = eptHour * 3600 + eptMinute * 60;
                    /* Lookup earliest pickupTime: */
                    pts = getOrderableTimes(eptDayOfWeek, eptSecondsAfterMidnight);
                    var pt = pts[0];
                    if (!(pt.offsetDays == 0 &amp;&amp; eptSecondsAfterMidnight &gt;= pt.time_from &amp;&amp; eptSecondsAfterMidnight &lt; pt.time_until)) {
                        ept = new Date((dt - (dt % 86400) + pt.offsetDays * 86400 + pt.time_from + 60 * ept.getTimezoneOffset()) * 1000);
                    }
                    return {
                        outlet: 'message_takeaway_time',
                        form: {
                          positive_button: nextPossitiveButton
                        },
                        defaultValue: ept.getTime() / 1000 - 60 * d.getTimezoneOffset()
                    };
                }
            </javascriptCode>
        </flowCode>

        <flowCode
            id="flowcode_calculate_payment"
            exceptionReference="flush_advanced_order_processing">
            <outlet
                reference="message_pay_optional"
                name="message_pay_optional"
                value="message_pay_optional" />
            <outlet
                reference="message_pay_required"
                name="message_pay_required"
                value="message_pay_required" />
            <outlet
                reference="flush_advanced_order_processing"
                name="flush_advanced_order_processing"
                value="flush_advanced_order_processing" />
            <javascriptCode>
               function run(rogerthat, messageFlowRun) {
                    var steps = messageFlowRun.steps;
                    var amount = 0;
                    var categories = steps[0].form_result.result.categories;
                    for (var ci = 0; ci &lt; categories.length; ci++) {
                        for (var ii = 0; ii &lt; categories[ci].items.length; ii++) {
                            var item = categories[ci].items[ii];
                            if (item.value &gt; 0) {
                               amount += item.value * item.unit_price / item.step_unit_conversion;
                            }
                        }
                    }
                    if (amount &lt;= 0) {
                        return {outlet: 'flush_advanced_order_processing'};
                    }
                    var amountStr = (amount / 100).toFixed(2);
                    var outlet = 'message_pay_required';
                    if (rogerthat.service.data.settings.payment.optional) {
                        outlet = 'message_pay_optional';
                    }
                   var methods = [];
                   var providers = rogerthat.service.data.settings.payment.providers;
                   for (var i = 0; i &lt; providers.length; i++) {
                       var provider = providers[i];
                       switch (provider.provider_id) {
                           case 'payconiq':
                               methods.push({
                                   provider_id: 'payconiq',
                                   currency: 'EUR',
                                   amount: 0,
                                   target: rogerthat.service.account,
                                   precision: 2,
                                   calculate_amount: true,
                               });
                               break;
                           case 'threefold':
                           case 'threefold_testnet':
                               if (provider.settings.address) {
                                   methods.push({
                                       provider_id: provider.provider_id,
                                       currency: 'TFT',
                                       amount: 0,
                                       target: provider.settings.address,
                                       precision: 5,
                                       calculate_amount: true,
                                   });
                               }
                               break;
                       }
                   }
                    return {
                        outlet: outlet,
                        message: "{% translate language, 'pay_widget_message', '_duplicate_backslashes=True' %}".replace('%(amount)s', amountStr).replace('%(currency)s', '{{ settings.currency }}'),
                        defaultValue: {
                            memo: "{% translate language, 'pay_widget_memo', '_duplicate_backslashes=True' %}".replace('%(name)s', rogerthat.service.name).replace('%(app_name)s', rogerthat.system.appName),
                            target: rogerthat.service.account,
                            base_method:{
                                currency: '{{ settings.currency }}',
                                amount: amount,
                                precision: 2,
                            },
                            test_mode: rogerthat.service.data.settings.payment.test_mode,
                            methods: methods,
                        }
                    };
                };
            </javascriptCode>
        </flowCode>

        <formMessage brandingKey="{{ branding_key }}"
                     id="message_pay_optional"
                     alertIntervalType="NONE" alertType="SILENT"
                     positiveReference="flush_advanced_order_processing"
                     negativeReference="flush_advanced_order_processing"
                     vibrate="false" autoLock="true">

            <content/>
            <form positiveButtonConfirmation="" negativeButtonConfirmation=""
                  positiveButtonCaption="{% translate language, 'Send' %}"
                  negativeButtonCaption="{% translate language, 'skip' %}">
                <widget xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="PayWidget" memo="App order" target="">
                    <baseMethod>
                        <currency>EUR</currency>
                        <amount>1</amount>
                        <precision>2</precision>
                    </baseMethod>
                    <method>
                        <provider_id>payconiq</provider_id>
                        <currency>EUR</currency>
                        <amount>1</amount>
                        <precision>2</precision>
                        <target>(fake target)</target>
                        <calculateAmount>false</calculateAmount>
                    </method>
                </widget>
            </form>
        </formMessage>

        <formMessage brandingKey="{{ branding_key }}"
                     id="message_pay_required"
                     alertIntervalType="NONE" alertType="SILENT"
                     positiveReference="flush_advanced_order_processing"
                     negativeReference="end_advanced_order"
                     vibrate="false" autoLock="true">

            <content/>
            <form positiveButtonConfirmation="" negativeButtonConfirmation=""
                  positiveButtonCaption="{% translate language, 'Send' %}"
                  negativeButtonCaption="{% translate language, 'Cancel' %}">
                <widget xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="PayWidget" memo="App order" target="">
                    <baseMethod>
                        <currency>EUR</currency>
                        <amount>1</amount>
                        <precision>2</precision>
                    </baseMethod>
                    <method>
                        <provider_id>payconiq</provider_id>
                        <currency>EUR</currency>
                        <amount>1</amount>
                        <precision>2</precision>
                        <target>(fake target)</target>
                        <calculateAmount>false</calculateAmount>
                    </method>
                </widget>
            </form>
        </formMessage>

        <flowCode
            id="flow_code_check_internet_before_flush"
            exceptionReference="flush_advanced_order_processing">
            <outlet
                name="flowcode_internet"
                value="flowcode_internet"
                reference="flush_advanced_order_processing"/>
            <outlet
                name="flowcode_internet_with_payment"
                value="flowcode_internet_with_payment"
                reference="flowcode_calculate_payment"/>
            <outlet
                name="message_no_internet"
                value="message_no_internet"
                reference="message_no_internet"/>
            <javascriptCode>
                function run(rogerthat, messageFlowRun) {
                    if (rogerthat.system.internet &amp;&amp; !rogerthat.system.internet.connected) {
                        return {outlet: 'message_no_internet'};
                    }
                    var steps = messageFlowRun.steps;
                    if (steps[0]['step_id'] === 'message_advanced_order_with_pay') {
                        return {outlet: 'flowcode_internet_with_payment'};
                    }
                    return {outlet: 'flowcode_internet'};
                };
            </javascriptCode>
        </flowCode>

        <resultsFlush id="flush_advanced_order_processing"
                      reference="{% if manual_confirmation %}message_order_sent_wait_for_confirmation{% else %}end_processing{% endif %}"/>

        {%- if manual_confirmation %}
        <message
            id="message_order_sent_wait_for_confirmation"
            alertIntervalType="NONE"
            alertType="SILENT"
            brandingKey="{{ branding_key }}"
            allowDismiss="true"
            vibrate="false"
            dismissReference="end_processing"
            autoLock="true">
            <content>{% translate language, 'order-flow-manual-confirm', 'name=' + settings.name|escape %}</content>
        </message>
        {% endif %}

        <message
            brandingKey="{{ branding_key }}"
            id="message_no_internet"
            alertIntervalType="NONE"
            alertType="SILENT"
            allowDismiss="false"
            vibrate="true"
            autoLock="true">
            <content>{% translate language, 'message_no_internet_try_again' %}</content>
            <answer
                id="button_try_again"
                caption="{% translate language, 'Try again' %}"
                reference="flow_code_check_internet_before_flush" />
            <answer
                id="button_abort"
                caption="{% translate language, 'Cancel order' %}"
                reference="end_advanced_order" />
        </message>

    </definition>
</messageFlowDefinitionSet>
