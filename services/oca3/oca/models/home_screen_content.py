# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from oca.models.base_model_ import Model
from oca.models.home_screen_content_type import HomeScreenContentType
from oca import util


class HomeScreenContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, embedded_app=None, sections=None, service_email=None):  # noqa: E501
        """HomeScreenContent - a model defined in OpenAPI

        :param type: The type of this HomeScreenContent.  # noqa: E501
        :type type: HomeScreenContentType
        :param embedded_app: The embedded_app of this HomeScreenContent.  # noqa: E501
        :type embedded_app: str
        :param sections: The sections of this HomeScreenContent.  # noqa: E501
        :type sections: List[Dict[str, object]]
        :param service_email: The service_email of this HomeScreenContent.  # noqa: E501
        :type service_email: str
        """
        self.openapi_types = {
            'type': HomeScreenContentType,
            'embedded_app': str,
            'sections': List[Dict[str, object]],
            'service_email': str
        }

        self.attribute_map = {
            'type': 'type',
            'embedded_app': 'embedded_app',
            'sections': 'sections',
            'service_email': 'service_email'
        }

        self._type = type
        self._embedded_app = embedded_app
        self._sections = sections
        self._service_email = service_email

    @classmethod
    def from_dict(cls, dikt) -> 'HomeScreenContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HomeScreenContent of this HomeScreenContent.  # noqa: E501
        :rtype: HomeScreenContent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this HomeScreenContent.


        :return: The type of this HomeScreenContent.
        :rtype: HomeScreenContentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HomeScreenContent.


        :param type: The type of this HomeScreenContent.
        :type type: HomeScreenContentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def embedded_app(self):
        """Gets the embedded_app of this HomeScreenContent.

        Only set when 'type' is embedded_app  # noqa: E501

        :return: The embedded_app of this HomeScreenContent.
        :rtype: str
        """
        return self._embedded_app

    @embedded_app.setter
    def embedded_app(self, embedded_app):
        """Sets the embedded_app of this HomeScreenContent.

        Only set when 'type' is embedded_app  # noqa: E501

        :param embedded_app: The embedded_app of this HomeScreenContent.
        :type embedded_app: str
        """

        self._embedded_app = embedded_app

    @property
    def sections(self):
        """Gets the sections of this HomeScreenContent.

        Content of the home screen  # noqa: E501

        :return: The sections of this HomeScreenContent.
        :rtype: List[Dict[str, object]]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this HomeScreenContent.

        Content of the home screen  # noqa: E501

        :param sections: The sections of this HomeScreenContent.
        :type sections: List[Dict[str, object]]
        """

        self._sections = sections

    @property
    def service_email(self):
        """Gets the service_email of this HomeScreenContent.

        This service will be used as 'context' in the embedded app, to set user data / service data.  # noqa: E501

        :return: The service_email of this HomeScreenContent.
        :rtype: str
        """
        return self._service_email

    @service_email.setter
    def service_email(self, service_email):
        """Sets the service_email of this HomeScreenContent.

        This service will be used as 'context' in the embedded app, to set user data / service data.  # noqa: E501

        :param service_email: The service_email of this HomeScreenContent.
        :type service_email: str
        """

        self._service_email = service_email
